%%{
/*
 * Copyright (c) 2019 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== ERPC.h.xdt ========
 */
%%}
%%{
    let ERPC = system.modules["/ti/rpc/ERPC"];
%%}
/*
 *  ======== ti_rpc_erpc.h ========
 *  EmbeddedRPC run-time setup
 *
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 */

#include <stdarg.h>

#if defined (__cplusplus)
extern "C" {
#endif
%
% for (let i = 0; i < ERPC.$instances.length; i++) {
% let inst = ERPC.$instances[i];
% let runFxn = ["ti_rpc_erpc", inst.idl, inst.role, "run"].join("_");
% if (((inst.role == "client") && (inst.hasCbk)) || (inst.role == "server")) {

/*
 *  ======== `runFxn` ========
 *  Call into the RPC server to provide an execution context
 *
 *  Must call ti_rpc_erpc_setup() before calling this function.
 *
 *  This function does not return. You must use a dedicated task
 *  to call this function. The server will block the task until
 *  a message has been received.
 */
void `runFxn`(void);
%
% }
% } /* foreach instance */

/*
 *  ======== ti_rpc_erpc_setup ========
 *  Create the EmbeddedRPC client and server objects
 *
 *  This function must be called before any RPC function is invoked.
 *  It must be called from thread level and with interrupts enabled.
 *
 *  This function also creates the transport objects betweeen the
 *  end-points which requires communication with the remote end-point.
 *  This may cause the calling task to busy-wait until a response has
 *  been received. For best results, all end-points should coordinate
 *  their setup phase.
 */
void ti_rpc_erpc_setup(void);

#if defined (__cplusplus)
}
#endif
