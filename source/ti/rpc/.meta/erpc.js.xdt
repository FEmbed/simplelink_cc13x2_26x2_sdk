%%{
/*
 * Copyright (c) 2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== erpc.js.xdt ========
 */
%%}
%%{
    let ERPC = system.modules["/ti/rpc/ERPC"];
    let Interface = system.modules["/ti/rpc/Interface"];

    /*
     *  ======== findInterfaceInstances ========
     *  Find all Interface instances owned by the given instance
     */
    function findInterfaceInstances(inst)
    {
        let ifs = new Array();

        for (let i = 0; i < Interface.$instances.length; i++) {
            if (Interface.$instances[i].$ownedBy == inst) {
                ifs.push(Interface.$instances[i]);
            }
        }

        return (ifs);
    }

    /* create array of IDL descriptors */
    let idlDescAry = new Array();

    for (let i = 0; i < ERPC.$instances.length; i++) {
        let inst = ERPC.$instances[i];
        idlDescAry.push({ name: inst.idl });
    }

    /* find all interface instances for each IDL descriptor */
    for (let i = 0; i < ERPC.$instances.length; i++) {
        let inst = ERPC.$instances[i];
        let desc = idlDescAry[i];
        desc.ifs = new Array();

        /* check the current instance for any interfaces */
        for (let j = 0; j < inst.interfaces.length; j++) {
            for (let k = 0; k < inst.interfaces.length; k++) {
                desc.ifs.push(inst.interfaces[k]);
            }
        }

        /* look upstream to find attached interface instances */
        if (inst.$ownedBy) {
            desc.ifs = findInterfaceInstances(inst.$ownedBy);
        }
        else if (inst.$sharedBy) {
            for (let j = 0; j < inst.$sharedBy.length; j++) {
                let p = inst.$sharedBy[j];
                desc.ifs = desc.ifs.concat(findInterfaceInstances(p));
            }
        }
    }

    /*  The search for interface instances above will generated duplicate
     *  entries for include and import statements (because of api and cbk
     *  groups). Compute a unique sorted array of includes and imports.
     */
    for (let i = 0; i < idlDescAry.length; i++) {
        let desc = idlDescAry[i];

        /* unique sorted array of include statements */
        desc.inclAry = new Array();
        for (let j = 0; j < desc.ifs.length; j++) {
            desc.inclAry.push(desc.ifs[j].idlInclude);
        }
        desc.inclAry = desc.inclAry.sort().filter(
            function(elem, index, ary) {
                return (index == ary.length - 1 || ary[index + 1] != elem);
            });

        /* unique sorted array of import statements */
        desc.imptAry = new Array();
        for (let j = 0; j < desc.ifs.length; j++) {
            desc.imptAry.push(desc.ifs[j].idlImport);
        }
        desc.imptAry = desc.imptAry.sort().filter(
            function(elem, index, ary) {
                return (index == ary.length - 1 || ary[index + 1] != elem);
            });
    }
%%}
/*
 *  ======== erpc.js ========
 *
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 */

let fs = require('fs');

% for (let i = 0; i < idlDescAry.length; i++) {
% let desc = idlDescAry[i];
let `desc.name`_erpc = [
    "/*",
    " *  ======== `desc.name`.erpc ========",
    " */",
    "",
% for (let j = 0; j < desc.inclAry.length; j++) {
    "@c:include(\"`desc.inclAry[j]`\")",
% }
    "program `desc.name`",
    "",
% for (let j = 0; j < desc.imptAry.length; j++) {
    "import \"`desc.imptAry[j]`\"",
% }
].join("\n") + "\n";

fs.writeFileSync("syscfg/rpc/`desc.name`.erpc", `desc.name`_erpc);
% }
