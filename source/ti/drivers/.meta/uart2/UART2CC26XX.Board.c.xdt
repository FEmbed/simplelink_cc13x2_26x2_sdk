%%{
/*
 * Copyright (c) 2019-2020, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== UART2CC26XX.Board.c.xdt ========
 */

    let Common    = system.getScript("/ti/drivers/Common.js");

    let UART2     = args[0];
    let instances = UART2.$instances;

    if (instances.length == 0) return;

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = UART2.defaultInstanceName + "COUNT";

    /* localize the object names with this device ID */
    let devId = system.deviceData.deviceId;

    /* Get name of device specific include directory */
    let devicesDir = Common.device2DevicesDir(devId);

    /* For mapping FIFO thresholds into the enum names */
    let map = {
        "1/8"  : "FIFO_THRESHOLD_1_8",
        "2/8"  : "FIFO_THRESHOLD_2_8",
        "4/8"  : "FIFO_THRESHOLD_4_8",
        "6/8"  : "FIFO_THRESHOLD_6_8",
        "7/8"  : "FIFO_THRESHOLD_7_8"
        };

    let driver = 'UART2CC26X2';  // In case name changes
%%}
/*
 *  =============================== UART2 ===============================
 */

#include <ti/drivers/UART2.h>
#include <ti/drivers/uart2/`driver`.h>
#include <ti/drivers/Power.h>
#include <ti/drivers/power/PowerCC26X2.h>
#include <ti/devices/`devicesDir`/inc/hw_memmap.h>
#include <ti/devices/`devicesDir`/inc/hw_ints.h>

#define `countDef` `instances.length`

`driver`_Object uart2CC26X2Objects[`countDef`];

% for (let i = 0; i < instances.length; i++) {
%     let inst = instances[i];
static unsigned char uart2RxRingBuffer`i`[`inst.rxRingBufferSize`];
static unsigned char uart2TxRingBuffer`i`[`inst.txRingBufferSize`];
% }

static const `driver`_HWAttrs uart2CC26X2HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst        = instances[i];
%     let uart        = inst.uart;
%     let solution    = uart.$solution;
%     let peripheral  = system.deviceData.peripherals[solution.peripheralName];
%     let rxPinName   = 'PIN_UNASSIGNED';
%     let txPinName   = 'PIN_UNASSIGNED';
%     let ctsPinName  = 'PIN_UNASSIGNED';
%     let rtsPinName  = 'PIN_UNASSIGNED';
%     if ('rxPin' in uart) {
%         /* Replace 'DIO' with 'IOID' */
%         rxPinName =  'IOID' + uart.rxPin.$solution.devicePinName.substring(3);
%     }
%     if ('txPin' in uart) {
%         txPinName =  'IOID' + uart.txPin.$solution.devicePinName.substring(3);
%     }
%
%     let flowName;
%     if (inst.flowControl) {
%         flowName = 'UART2_FLOWCTRL_HARDWARE';
%         if ('ctsPin' in uart) {
%             ctsPinName = 'IOID' + uart.ctsPin.$solution.devicePinName.substring(3);
%         }
%         if ('rtsPin' in uart) {
%             rtsPinName = 'IOID' + uart.rtsPin.$solution.devicePinName.substring(3);
%         }
%     }
%     else {
%         flowName = 'UART2_FLOWCTRL_NONE';
%     }
  {
    .baseAddr           = `peripheral.name`_BASE,
    .intNum             = INT_`peripheral.name`_COMB,
    .intPriority        = `Common.intPriority2Hex(inst.interruptPriority)`,
    .rxPin              = `rxPinName`,
    .txPin              = `txPinName`,
    .ctsPin             = `ctsPinName`,
    .rtsPin             = `rtsPinName`,
    .flowControl        = `flowName`,
    .rxBufPtr           = uart2RxRingBuffer`i`,
    .rxBufSize          = sizeof(uart2RxRingBuffer`i`),
    .txBufPtr           = uart2TxRingBuffer`i`,
    .txBufSize          = sizeof(uart2TxRingBuffer`i`),
    .rxChannelMask      = 1 << UDMA_CHAN_`peripheral.name`_RX,
    .txChannelMask      = 1 << UDMA_CHAN_`peripheral.name`_TX,
    .txIntFifoThr       = `driver`_`map[inst.txInterruptFifoThreshold]`,
    .rxIntFifoThr       = `driver`_`map[inst.rxInterruptFifoThreshold]`
  },
% }
};

const UART2_Config UART2_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst    = instances[i];
    {   /* `inst.$name` */
        .object      = &uart2CC26X2Objects[`inst.$name`],
        .hwAttrs     = &uart2CC26X2HWAttrs[`inst.$name`]
    },
% }
};

`declarations`
const uint_least8_t UART2_count = `countDef`;
